# coding: utf-8

"""
    LAMP Platform

    The LAMP Platform API.  # noqa: E501

    OpenAPI spec version: 0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EnvironmentEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'attachments': 'dict(str, object)',
        'timestamp': 'int',
        'coordinates': 'list[float]',
        'accuracy': 'float',
        'location_context': 'LocationContext',
        'social_context': 'SocialContext'
    }

    attribute_map = {
        'id': 'id',
        'attachments': 'attachments',
        'timestamp': 'timestamp',
        'coordinates': 'coordinates',
        'accuracy': 'accuracy',
        'location_context': 'location_context',
        'social_context': 'social_context'
    }

    def __init__(self, id=None, attachments=None, timestamp=None, coordinates=None, accuracy=None, location_context=None, social_context=None):  # noqa: E501
        """EnvironmentEvent - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._attachments = None
        self._timestamp = None
        self._coordinates = None
        self._accuracy = None
        self._location_context = None
        self._social_context = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if attachments is not None:
            self.attachments = attachments
        if timestamp is not None:
            self.timestamp = timestamp
        if coordinates is not None:
            self.coordinates = coordinates
        if accuracy is not None:
            self.accuracy = accuracy
        if location_context is not None:
            self.location_context = location_context
        if social_context is not None:
            self.social_context = social_context

    @property
    def id(self):
        """Gets the id of this EnvironmentEvent.  # noqa: E501

        A globally unique reference for objects within the LAMP platform.  # noqa: E501

        :return: The id of this EnvironmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnvironmentEvent.

        A globally unique reference for objects within the LAMP platform.  # noqa: E501

        :param id: The id of this EnvironmentEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def attachments(self):
        """Gets the attachments of this EnvironmentEvent.  # noqa: E501


        :return: The attachments of this EnvironmentEvent.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this EnvironmentEvent.


        :param attachments: The attachments of this EnvironmentEvent.  # noqa: E501
        :type: dict(str, object)
        """

        self._attachments = attachments

    @property
    def timestamp(self):
        """Gets the timestamp of this EnvironmentEvent.  # noqa: E501


        :return: The timestamp of this EnvironmentEvent.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this EnvironmentEvent.


        :param timestamp: The timestamp of this EnvironmentEvent.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def coordinates(self):
        """Gets the coordinates of this EnvironmentEvent.  # noqa: E501

        The GPS coordinates or approximate postal address recorded with the event.  # noqa: E501

        :return: The coordinates of this EnvironmentEvent.  # noqa: E501
        :rtype: list[float]
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this EnvironmentEvent.

        The GPS coordinates or approximate postal address recorded with the event.  # noqa: E501

        :param coordinates: The coordinates of this EnvironmentEvent.  # noqa: E501
        :type: list[float]
        """

        self._coordinates = coordinates

    @property
    def accuracy(self):
        """Gets the accuracy of this EnvironmentEvent.  # noqa: E501

        The accuracy of provided GPS coordinates; if `null`, the coordinates represent an approximate postal address.  # noqa: E501

        :return: The accuracy of this EnvironmentEvent.  # noqa: E501
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this EnvironmentEvent.

        The accuracy of provided GPS coordinates; if `null`, the coordinates represent an approximate postal address.  # noqa: E501

        :param accuracy: The accuracy of this EnvironmentEvent.  # noqa: E501
        :type: float
        """

        self._accuracy = accuracy

    @property
    def location_context(self):
        """Gets the location_context of this EnvironmentEvent.  # noqa: E501


        :return: The location_context of this EnvironmentEvent.  # noqa: E501
        :rtype: LocationContext
        """
        return self._location_context

    @location_context.setter
    def location_context(self, location_context):
        """Sets the location_context of this EnvironmentEvent.


        :param location_context: The location_context of this EnvironmentEvent.  # noqa: E501
        :type: LocationContext
        """

        self._location_context = location_context

    @property
    def social_context(self):
        """Gets the social_context of this EnvironmentEvent.  # noqa: E501


        :return: The social_context of this EnvironmentEvent.  # noqa: E501
        :rtype: SocialContext
        """
        return self._social_context

    @social_context.setter
    def social_context(self, social_context):
        """Sets the social_context of this EnvironmentEvent.


        :param social_context: The social_context of this EnvironmentEvent.  # noqa: E501
        :type: SocialContext
        """

        self._social_context = social_context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvironmentEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
