# coding: utf-8

"""
    LAMP Platform

    The LAMP Platform API.  # noqa: E501

    OpenAPI spec version: 0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Participant(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'attachments': 'dict(str, object)',
        'study_code': 'str',
        'settings': 'ParticipantSettings',
        'result_events': 'list[str]',
        'metadata_events': 'list[str]',
        'sensor_events': 'list[str]',
        'environment_events': 'list[str]',
        'fitness_events': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'attachments': 'attachments',
        'study_code': 'study_code',
        'settings': 'settings',
        'result_events': 'result_events',
        'metadata_events': 'metadata_events',
        'sensor_events': 'sensor_events',
        'environment_events': 'environment_events',
        'fitness_events': 'fitness_events'
    }

    def __init__(self, id=None, attachments=None, study_code=None, settings=None, result_events=None, metadata_events=None, sensor_events=None, environment_events=None, fitness_events=None):  # noqa: E501
        """Participant - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._attachments = None
        self._study_code = None
        self._settings = None
        self._result_events = None
        self._metadata_events = None
        self._sensor_events = None
        self._environment_events = None
        self._fitness_events = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if attachments is not None:
            self.attachments = attachments
        if study_code is not None:
            self.study_code = study_code
        if settings is not None:
            self.settings = settings
        if result_events is not None:
            self.result_events = result_events
        if metadata_events is not None:
            self.metadata_events = metadata_events
        if sensor_events is not None:
            self.sensor_events = sensor_events
        if environment_events is not None:
            self.environment_events = environment_events
        if fitness_events is not None:
            self.fitness_events = fitness_events

    @property
    def id(self):
        """Gets the id of this Participant.  # noqa: E501

        A globally unique reference for objects within the LAMP platform.  # noqa: E501

        :return: The id of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Participant.

        A globally unique reference for objects within the LAMP platform.  # noqa: E501

        :param id: The id of this Participant.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def attachments(self):
        """Gets the attachments of this Participant.  # noqa: E501


        :return: The attachments of this Participant.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Participant.


        :param attachments: The attachments of this Participant.  # noqa: E501
        :type: dict(str, object)
        """

        self._attachments = attachments

    @property
    def study_code(self):
        """Gets the study_code of this Participant.  # noqa: E501

        The researcher-provided study code for the participant.  # noqa: E501

        :return: The study_code of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._study_code

    @study_code.setter
    def study_code(self, study_code):
        """Sets the study_code of this Participant.

        The researcher-provided study code for the participant.  # noqa: E501

        :param study_code: The study_code of this Participant.  # noqa: E501
        :type: str
        """

        self._study_code = study_code

    @property
    def settings(self):
        """Gets the settings of this Participant.  # noqa: E501


        :return: The settings of this Participant.  # noqa: E501
        :rtype: ParticipantSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Participant.


        :param settings: The settings of this Participant.  # noqa: E501
        :type: ParticipantSettings
        """

        self._settings = settings

    @property
    def result_events(self):
        """Gets the result_events of this Participant.  # noqa: E501

        The set of all result events from the participant.  # noqa: E501

        :return: The result_events of this Participant.  # noqa: E501
        :rtype: list[str]
        """
        return self._result_events

    @result_events.setter
    def result_events(self, result_events):
        """Sets the result_events of this Participant.

        The set of all result events from the participant.  # noqa: E501

        :param result_events: The result_events of this Participant.  # noqa: E501
        :type: list[str]
        """

        self._result_events = result_events

    @property
    def metadata_events(self):
        """Gets the metadata_events of this Participant.  # noqa: E501

        The set of all metadata events from the participant.  # noqa: E501

        :return: The metadata_events of this Participant.  # noqa: E501
        :rtype: list[str]
        """
        return self._metadata_events

    @metadata_events.setter
    def metadata_events(self, metadata_events):
        """Sets the metadata_events of this Participant.

        The set of all metadata events from the participant.  # noqa: E501

        :param metadata_events: The metadata_events of this Participant.  # noqa: E501
        :type: list[str]
        """

        self._metadata_events = metadata_events

    @property
    def sensor_events(self):
        """Gets the sensor_events of this Participant.  # noqa: E501

        The set of all sensor events from the participant.  # noqa: E501

        :return: The sensor_events of this Participant.  # noqa: E501
        :rtype: list[str]
        """
        return self._sensor_events

    @sensor_events.setter
    def sensor_events(self, sensor_events):
        """Sets the sensor_events of this Participant.

        The set of all sensor events from the participant.  # noqa: E501

        :param sensor_events: The sensor_events of this Participant.  # noqa: E501
        :type: list[str]
        """

        self._sensor_events = sensor_events

    @property
    def environment_events(self):
        """Gets the environment_events of this Participant.  # noqa: E501

        The set of all environment events from the participant.  # noqa: E501

        :return: The environment_events of this Participant.  # noqa: E501
        :rtype: list[str]
        """
        return self._environment_events

    @environment_events.setter
    def environment_events(self, environment_events):
        """Sets the environment_events of this Participant.

        The set of all environment events from the participant.  # noqa: E501

        :param environment_events: The environment_events of this Participant.  # noqa: E501
        :type: list[str]
        """

        self._environment_events = environment_events

    @property
    def fitness_events(self):
        """Gets the fitness_events of this Participant.  # noqa: E501

        The set of all fitness events from the participant.  # noqa: E501

        :return: The fitness_events of this Participant.  # noqa: E501
        :rtype: list[str]
        """
        return self._fitness_events

    @fitness_events.setter
    def fitness_events(self, fitness_events):
        """Sets the fitness_events of this Participant.

        The set of all fitness events from the participant.  # noqa: E501

        :param fitness_events: The fitness_events of this Participant.  # noqa: E501
        :type: list[str]
        """

        self._fitness_events = fitness_events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Participant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
