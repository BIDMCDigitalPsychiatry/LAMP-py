# coding: utf-8

"""
    LAMP Platform

    The LAMP Platform API.  # noqa: E501

    OpenAPI spec version: 0.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class StudyApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def study_all(self, **kwargs):  # noqa: E501
        """Get the set of all studies.  # noqa: E501

        Get the set of all studies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.study_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def study_all_with_http_info(self, **kwargs):  # noqa: E501
        """Get the set of all studies.  # noqa: E501

        Get the set of all studies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_all" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/study', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_all_by_researcher(self, researcher_id, **kwargs):  # noqa: E501
        """Get the set of all studies conducted by a single researcher, by an identifier.  # noqa: E501

        Get the set of all studies conducted by a single researcher, by an identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_all_by_researcher(researcher_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str researcher_id: (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_all_by_researcher_with_http_info(researcher_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_all_by_researcher_with_http_info(researcher_id, **kwargs)  # noqa: E501
            return data

    def study_all_by_researcher_with_http_info(self, researcher_id, **kwargs):  # noqa: E501
        """Get the set of all studies conducted by a single researcher, by an identifier.  # noqa: E501

        Get the set of all studies conducted by a single researcher, by an identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_all_by_researcher_with_http_info(researcher_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str researcher_id: (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['researcher_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_all_by_researcher" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'researcher_id' is set
        if ('researcher_id' not in local_var_params or
                local_var_params['researcher_id'] is None):
            raise ValueError("Missing the required parameter `researcher_id` when calling `study_all_by_researcher`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'researcher_id' in local_var_params:
            path_params['researcher_id'] = local_var_params['researcher_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/researcher/{researcher_id}/study', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_create(self, study_id, study, **kwargs):  # noqa: E501
        """Get a single study, by an identifier.  # noqa: E501

        Get a single study, by an identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_create(study_id, study, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_id: (required)
        :param Study study: (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_create_with_http_info(study_id, study, **kwargs)  # noqa: E501
        else:
            (data) = self.study_create_with_http_info(study_id, study, **kwargs)  # noqa: E501
            return data

    def study_create_with_http_info(self, study_id, study, **kwargs):  # noqa: E501
        """Get a single study, by an identifier.  # noqa: E501

        Get a single study, by an identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_create_with_http_info(study_id, study, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_id: (required)
        :param Study study: (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['study_id', 'study']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'study_id' is set
        if ('study_id' not in local_var_params or
                local_var_params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_create`")  # noqa: E501
        # verify the required parameter 'study' is set
        if ('study' not in local_var_params or
                local_var_params['study'] is None):
            raise ValueError("Missing the required parameter `study` when calling `study_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'study_id' in local_var_params:
            path_params['study_id'] = local_var_params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'study' in local_var_params:
            body_params = local_var_params['study']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/researcher/{researcher_id}/study/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_delete(self, study_id, **kwargs):  # noqa: E501
        """Get a single study, by an identifier.  # noqa: E501

        Get a single study, by an identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_delete(study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_id: (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_delete_with_http_info(study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_delete_with_http_info(study_id, **kwargs)  # noqa: E501
            return data

    def study_delete_with_http_info(self, study_id, **kwargs):  # noqa: E501
        """Get a single study, by an identifier.  # noqa: E501

        Get a single study, by an identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_delete_with_http_info(study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_id: (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['study_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'study_id' is set
        if ('study_id' not in local_var_params or
                local_var_params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'study_id' in local_var_params:
            path_params['study_id'] = local_var_params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/study/{study_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_update(self, study_id, study, **kwargs):  # noqa: E501
        """Get a single study, by an identifier.  # noqa: E501

        Get a single study, by an identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_update(study_id, study, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_id: (required)
        :param Study study: (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_update_with_http_info(study_id, study, **kwargs)  # noqa: E501
        else:
            (data) = self.study_update_with_http_info(study_id, study, **kwargs)  # noqa: E501
            return data

    def study_update_with_http_info(self, study_id, study, **kwargs):  # noqa: E501
        """Get a single study, by an identifier.  # noqa: E501

        Get a single study, by an identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_update_with_http_info(study_id, study, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_id: (required)
        :param Study study: (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['study_id', 'study']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'study_id' is set
        if ('study_id' not in local_var_params or
                local_var_params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_update`")  # noqa: E501
        # verify the required parameter 'study' is set
        if ('study' not in local_var_params or
                local_var_params['study'] is None):
            raise ValueError("Missing the required parameter `study` when calling `study_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'study_id' in local_var_params:
            path_params['study_id'] = local_var_params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'study' in local_var_params:
            body_params = local_var_params['study']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/study/{study_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_view(self, study_id, **kwargs):  # noqa: E501
        """Get a single study, by an identifier.  # noqa: E501

        Get a single study, by an identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_view(study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_id: (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_view_with_http_info(study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_view_with_http_info(study_id, **kwargs)  # noqa: E501
            return data

    def study_view_with_http_info(self, study_id, **kwargs):  # noqa: E501
        """Get a single study, by an identifier.  # noqa: E501

        Get a single study, by an identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_view_with_http_info(study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_id: (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['study_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_view" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'study_id' is set
        if ('study_id' not in local_var_params or
                local_var_params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_view`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'study_id' in local_var_params:
            path_params['study_id'] = local_var_params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/study/{study_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
