# coding: utf-8

"""
    LAMP Platform

    The LAMP Platform API.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ActivitySpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'help_contents': 'str',
        'script_contents': 'str',
        'static_data_schema': 'object',
        'temporal_event_schema': 'object',
        'settings_schema': 'object'
    }

    attribute_map = {
        'name': 'name',
        'help_contents': 'help_contents',
        'script_contents': 'script_contents',
        'static_data_schema': 'static_data_schema',
        'temporal_event_schema': 'temporal_event_schema',
        'settings_schema': 'settings_schema'
    }

    def __init__(self, name=None, help_contents=None, script_contents=None, static_data_schema=None, temporal_event_schema=None, settings_schema=None, local_vars_configuration=None):  # noqa: E501
        """ActivitySpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._help_contents = None
        self._script_contents = None
        self._static_data_schema = None
        self._temporal_event_schema = None
        self._settings_schema = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if help_contents is not None:
            self.help_contents = help_contents
        if script_contents is not None:
            self.script_contents = script_contents
        if static_data_schema is not None:
            self.static_data_schema = static_data_schema
        if temporal_event_schema is not None:
            self.temporal_event_schema = temporal_event_schema
        if settings_schema is not None:
            self.settings_schema = settings_schema

    @property
    def name(self):
        """Gets the name of this ActivitySpec.  # noqa: E501

        The name of the activity spec.  # noqa: E501

        :return: The name of this ActivitySpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivitySpec.

        The name of the activity spec.  # noqa: E501

        :param name: The name of this ActivitySpec.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def help_contents(self):
        """Gets the help_contents of this ActivitySpec.  # noqa: E501

        Either a binary blob containing a document or video, or a string containing instructional aid about the Activity.  # noqa: E501

        :return: The help_contents of this ActivitySpec.  # noqa: E501
        :rtype: str
        """
        return self._help_contents

    @help_contents.setter
    def help_contents(self, help_contents):
        """Sets the help_contents of this ActivitySpec.

        Either a binary blob containing a document or video, or a string containing instructional aid about the Activity.  # noqa: E501

        :param help_contents: The help_contents of this ActivitySpec.  # noqa: E501
        :type: str
        """

        self._help_contents = help_contents

    @property
    def script_contents(self):
        """Gets the script_contents of this ActivitySpec.  # noqa: E501

        The WebView-compatible script that provides this Activity on mobile or desktop (IFrame) clients.  # noqa: E501

        :return: The script_contents of this ActivitySpec.  # noqa: E501
        :rtype: str
        """
        return self._script_contents

    @script_contents.setter
    def script_contents(self, script_contents):
        """Sets the script_contents of this ActivitySpec.

        The WebView-compatible script that provides this Activity on mobile or desktop (IFrame) clients.  # noqa: E501

        :param script_contents: The script_contents of this ActivitySpec.  # noqa: E501
        :type: str
        """

        self._script_contents = script_contents

    @property
    def static_data_schema(self):
        """Gets the static_data_schema of this ActivitySpec.  # noqa: E501

        The static data definition of an ActivitySpec.  # noqa: E501

        :return: The static_data_schema of this ActivitySpec.  # noqa: E501
        :rtype: object
        """
        return self._static_data_schema

    @static_data_schema.setter
    def static_data_schema(self, static_data_schema):
        """Sets the static_data_schema of this ActivitySpec.

        The static data definition of an ActivitySpec.  # noqa: E501

        :param static_data_schema: The static_data_schema of this ActivitySpec.  # noqa: E501
        :type: object
        """

        self._static_data_schema = static_data_schema

    @property
    def temporal_event_schema(self):
        """Gets the temporal_event_schema of this ActivitySpec.  # noqa: E501

        The temporal event data definition of an ActivitySpec.  # noqa: E501

        :return: The temporal_event_schema of this ActivitySpec.  # noqa: E501
        :rtype: object
        """
        return self._temporal_event_schema

    @temporal_event_schema.setter
    def temporal_event_schema(self, temporal_event_schema):
        """Sets the temporal_event_schema of this ActivitySpec.

        The temporal event data definition of an ActivitySpec.  # noqa: E501

        :param temporal_event_schema: The temporal_event_schema of this ActivitySpec.  # noqa: E501
        :type: object
        """

        self._temporal_event_schema = temporal_event_schema

    @property
    def settings_schema(self):
        """Gets the settings_schema of this ActivitySpec.  # noqa: E501

        The Activity settings definition of an ActivitySpec.  # noqa: E501

        :return: The settings_schema of this ActivitySpec.  # noqa: E501
        :rtype: object
        """
        return self._settings_schema

    @settings_schema.setter
    def settings_schema(self, settings_schema):
        """Sets the settings_schema of this ActivitySpec.

        The Activity settings definition of an ActivitySpec.  # noqa: E501

        :param settings_schema: The settings_schema of this ActivitySpec.  # noqa: E501
        :type: object
        """

        self._settings_schema = settings_schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivitySpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActivitySpec):
            return True

        return self.to_dict() != other.to_dict()
