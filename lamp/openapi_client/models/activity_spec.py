# coding: utf-8

"""
    LAMP Platform

    The LAMP Platform API.  # noqa: E501

    OpenAPI spec version: 0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ActivitySpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'attachments': 'dict(str, object)',
        'name': 'str',
        'help_contents': 'str',
        'script_contents': 'str',
        'definition': 'ActivityDefinition'
    }

    attribute_map = {
        'id': 'id',
        'attachments': 'attachments',
        'name': 'name',
        'help_contents': 'help_contents',
        'script_contents': 'script_contents',
        'definition': 'definition'
    }

    def __init__(self, id=None, attachments=None, name=None, help_contents=None, script_contents=None, definition=None):  # noqa: E501
        """ActivitySpec - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._attachments = None
        self._name = None
        self._help_contents = None
        self._script_contents = None
        self._definition = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if attachments is not None:
            self.attachments = attachments
        if name is not None:
            self.name = name
        if help_contents is not None:
            self.help_contents = help_contents
        if script_contents is not None:
            self.script_contents = script_contents
        if definition is not None:
            self.definition = definition

    @property
    def id(self):
        """Gets the id of this ActivitySpec.  # noqa: E501

        A globally unique reference for objects within the LAMP platform.  # noqa: E501

        :return: The id of this ActivitySpec.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivitySpec.

        A globally unique reference for objects within the LAMP platform.  # noqa: E501

        :param id: The id of this ActivitySpec.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def attachments(self):
        """Gets the attachments of this ActivitySpec.  # noqa: E501


        :return: The attachments of this ActivitySpec.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this ActivitySpec.


        :param attachments: The attachments of this ActivitySpec.  # noqa: E501
        :type: dict(str, object)
        """

        self._attachments = attachments

    @property
    def name(self):
        """Gets the name of this ActivitySpec.  # noqa: E501


        :return: The name of this ActivitySpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivitySpec.


        :param name: The name of this ActivitySpec.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def help_contents(self):
        """Gets the help_contents of this ActivitySpec.  # noqa: E501


        :return: The help_contents of this ActivitySpec.  # noqa: E501
        :rtype: str
        """
        return self._help_contents

    @help_contents.setter
    def help_contents(self, help_contents):
        """Sets the help_contents of this ActivitySpec.


        :param help_contents: The help_contents of this ActivitySpec.  # noqa: E501
        :type: str
        """

        self._help_contents = help_contents

    @property
    def script_contents(self):
        """Gets the script_contents of this ActivitySpec.  # noqa: E501


        :return: The script_contents of this ActivitySpec.  # noqa: E501
        :rtype: str
        """
        return self._script_contents

    @script_contents.setter
    def script_contents(self, script_contents):
        """Sets the script_contents of this ActivitySpec.


        :param script_contents: The script_contents of this ActivitySpec.  # noqa: E501
        :type: str
        """

        self._script_contents = script_contents

    @property
    def definition(self):
        """Gets the definition of this ActivitySpec.  # noqa: E501


        :return: The definition of this ActivitySpec.  # noqa: E501
        :rtype: ActivityDefinition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this ActivitySpec.


        :param definition: The definition of this ActivitySpec.  # noqa: E501
        :type: ActivityDefinition
        """

        self._definition = definition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivitySpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
