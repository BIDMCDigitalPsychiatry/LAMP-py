# coding: utf-8

"""
    LAMP Platform

    The LAMP Platform API.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DynamicAttachment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key': 'str',
        '_from': 'str',
        'to': 'str',
        'triggers': 'list[object]',
        'language': 'str',
        'contents': 'str',
        'requirements': 'list[object]'
    }

    attribute_map = {
        'key': 'key',
        '_from': 'from',
        'to': 'to',
        'triggers': 'triggers',
        'language': 'language',
        'contents': 'contents',
        'requirements': 'requirements'
    }

    def __init__(self, key=None, _from=None, to=None, triggers=None, language=None, contents=None, requirements=None, local_vars_configuration=None):  # noqa: E501
        """DynamicAttachment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key = None
        self.__from = None
        self._to = None
        self._triggers = None
        self._language = None
        self._contents = None
        self._requirements = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if triggers is not None:
            self.triggers = triggers
        if language is not None:
            self.language = language
        if contents is not None:
            self.contents = contents
        if requirements is not None:
            self.requirements = requirements

    @property
    def key(self):
        """Gets the key of this DynamicAttachment.  # noqa: E501

        The key.  # noqa: E501

        :return: The key of this DynamicAttachment.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this DynamicAttachment.

        The key.  # noqa: E501

        :param key: The key of this DynamicAttachment.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def _from(self):
        """Gets the _from of this DynamicAttachment.  # noqa: E501

        A globally unique reference for objects.  # noqa: E501

        :return: The _from of this DynamicAttachment.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this DynamicAttachment.

        A globally unique reference for objects.  # noqa: E501

        :param _from: The _from of this DynamicAttachment.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this DynamicAttachment.  # noqa: E501

        Either \"me\" to apply to the attachment owner only, the ID of an object owned  by the attachment owner, or a string representing the child object type to apply to.  # noqa: E501

        :return: The to of this DynamicAttachment.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this DynamicAttachment.

        Either \"me\" to apply to the attachment owner only, the ID of an object owned  by the attachment owner, or a string representing the child object type to apply to.  # noqa: E501

        :param to: The to of this DynamicAttachment.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def triggers(self):
        """Gets the triggers of this DynamicAttachment.  # noqa: E501

        The API triggers that activate script execution. These will be event stream types or object types in the API, or, if scheduling execution periodically, a cron-job string prefixed with \"!\" (exclamation point).  # noqa: E501

        :return: The triggers of this DynamicAttachment.  # noqa: E501
        :rtype: list[object]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this DynamicAttachment.

        The API triggers that activate script execution. These will be event stream types or object types in the API, or, if scheduling execution periodically, a cron-job string prefixed with \"!\" (exclamation point).  # noqa: E501

        :param triggers: The triggers of this DynamicAttachment.  # noqa: E501
        :type: list[object]
        """

        self._triggers = triggers

    @property
    def language(self):
        """Gets the language of this DynamicAttachment.  # noqa: E501

        The script language.  # noqa: E501

        :return: The language of this DynamicAttachment.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this DynamicAttachment.

        The script language.  # noqa: E501

        :param language: The language of this DynamicAttachment.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def contents(self):
        """Gets the contents of this DynamicAttachment.  # noqa: E501

        The script contents.  # noqa: E501

        :return: The contents of this DynamicAttachment.  # noqa: E501
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this DynamicAttachment.

        The script contents.  # noqa: E501

        :param contents: The contents of this DynamicAttachment.  # noqa: E501
        :type: str
        """

        self._contents = contents

    @property
    def requirements(self):
        """Gets the requirements of this DynamicAttachment.  # noqa: E501

        The script requirements.  # noqa: E501

        :return: The requirements of this DynamicAttachment.  # noqa: E501
        :rtype: list[object]
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this DynamicAttachment.

        The script requirements.  # noqa: E501

        :param requirements: The requirements of this DynamicAttachment.  # noqa: E501
        :type: list[object]
        """

        self._requirements = requirements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DynamicAttachment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DynamicAttachment):
            return True

        return self.to_dict() != other.to_dict()
