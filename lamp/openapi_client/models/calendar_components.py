# coding: utf-8

"""
    LAMP Platform

    The LAMP Platform API.  # noqa: E501

    OpenAPI spec version: 0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CalendarComponents(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'year': 'int',
        'month': 'int',
        'day': 'int',
        'hour': 'int',
        'minute': 'int',
        'second': 'int',
        'millisecond': 'int',
        'weekday': 'int',
        'ordinal': 'int',
        'week_of_month': 'int',
        'week_of_year': 'int'
    }

    attribute_map = {
        'year': 'year',
        'month': 'month',
        'day': 'day',
        'hour': 'hour',
        'minute': 'minute',
        'second': 'second',
        'millisecond': 'millisecond',
        'weekday': 'weekday',
        'ordinal': 'ordinal',
        'week_of_month': 'week_of_month',
        'week_of_year': 'week_of_year'
    }

    def __init__(self, year=None, month=None, day=None, hour=None, minute=None, second=None, millisecond=None, weekday=None, ordinal=None, week_of_month=None, week_of_year=None):  # noqa: E501
        """CalendarComponents - a model defined in OpenAPI"""  # noqa: E501

        self._year = None
        self._month = None
        self._day = None
        self._hour = None
        self._minute = None
        self._second = None
        self._millisecond = None
        self._weekday = None
        self._ordinal = None
        self._week_of_month = None
        self._week_of_year = None
        self.discriminator = None

        if year is not None:
            self.year = year
        if month is not None:
            self.month = month
        if day is not None:
            self.day = day
        if hour is not None:
            self.hour = hour
        if minute is not None:
            self.minute = minute
        if second is not None:
            self.second = second
        if millisecond is not None:
            self.millisecond = millisecond
        if weekday is not None:
            self.weekday = weekday
        if ordinal is not None:
            self.ordinal = ordinal
        if week_of_month is not None:
            self.week_of_month = week_of_month
        if week_of_year is not None:
            self.week_of_year = week_of_year

    @property
    def year(self):
        """Gets the year of this CalendarComponents.  # noqa: E501


        :return: The year of this CalendarComponents.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this CalendarComponents.


        :param year: The year of this CalendarComponents.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def month(self):
        """Gets the month of this CalendarComponents.  # noqa: E501


        :return: The month of this CalendarComponents.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this CalendarComponents.


        :param month: The month of this CalendarComponents.  # noqa: E501
        :type: int
        """

        self._month = month

    @property
    def day(self):
        """Gets the day of this CalendarComponents.  # noqa: E501


        :return: The day of this CalendarComponents.  # noqa: E501
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this CalendarComponents.


        :param day: The day of this CalendarComponents.  # noqa: E501
        :type: int
        """

        self._day = day

    @property
    def hour(self):
        """Gets the hour of this CalendarComponents.  # noqa: E501


        :return: The hour of this CalendarComponents.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this CalendarComponents.


        :param hour: The hour of this CalendarComponents.  # noqa: E501
        :type: int
        """

        self._hour = hour

    @property
    def minute(self):
        """Gets the minute of this CalendarComponents.  # noqa: E501


        :return: The minute of this CalendarComponents.  # noqa: E501
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this CalendarComponents.


        :param minute: The minute of this CalendarComponents.  # noqa: E501
        :type: int
        """

        self._minute = minute

    @property
    def second(self):
        """Gets the second of this CalendarComponents.  # noqa: E501


        :return: The second of this CalendarComponents.  # noqa: E501
        :rtype: int
        """
        return self._second

    @second.setter
    def second(self, second):
        """Sets the second of this CalendarComponents.


        :param second: The second of this CalendarComponents.  # noqa: E501
        :type: int
        """

        self._second = second

    @property
    def millisecond(self):
        """Gets the millisecond of this CalendarComponents.  # noqa: E501


        :return: The millisecond of this CalendarComponents.  # noqa: E501
        :rtype: int
        """
        return self._millisecond

    @millisecond.setter
    def millisecond(self, millisecond):
        """Sets the millisecond of this CalendarComponents.


        :param millisecond: The millisecond of this CalendarComponents.  # noqa: E501
        :type: int
        """

        self._millisecond = millisecond

    @property
    def weekday(self):
        """Gets the weekday of this CalendarComponents.  # noqa: E501


        :return: The weekday of this CalendarComponents.  # noqa: E501
        :rtype: int
        """
        return self._weekday

    @weekday.setter
    def weekday(self, weekday):
        """Sets the weekday of this CalendarComponents.


        :param weekday: The weekday of this CalendarComponents.  # noqa: E501
        :type: int
        """

        self._weekday = weekday

    @property
    def ordinal(self):
        """Gets the ordinal of this CalendarComponents.  # noqa: E501


        :return: The ordinal of this CalendarComponents.  # noqa: E501
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this CalendarComponents.


        :param ordinal: The ordinal of this CalendarComponents.  # noqa: E501
        :type: int
        """

        self._ordinal = ordinal

    @property
    def week_of_month(self):
        """Gets the week_of_month of this CalendarComponents.  # noqa: E501


        :return: The week_of_month of this CalendarComponents.  # noqa: E501
        :rtype: int
        """
        return self._week_of_month

    @week_of_month.setter
    def week_of_month(self, week_of_month):
        """Sets the week_of_month of this CalendarComponents.


        :param week_of_month: The week_of_month of this CalendarComponents.  # noqa: E501
        :type: int
        """

        self._week_of_month = week_of_month

    @property
    def week_of_year(self):
        """Gets the week_of_year of this CalendarComponents.  # noqa: E501


        :return: The week_of_year of this CalendarComponents.  # noqa: E501
        :rtype: int
        """
        return self._week_of_year

    @week_of_year.setter
    def week_of_year(self, week_of_year):
        """Sets the week_of_year of this CalendarComponents.


        :param week_of_year: The week_of_year of this CalendarComponents.  # noqa: E501
        :type: int
        """

        self._week_of_year = week_of_year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalendarComponents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
