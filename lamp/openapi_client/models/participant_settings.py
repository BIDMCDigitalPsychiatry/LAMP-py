# coding: utf-8

"""
    LAMP Platform

    The LAMP Platform API.  # noqa: E501

    OpenAPI spec version: 0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ParticipantSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'theme': 'str',
        'language': 'str',
        'last_login': 'int',
        'device_type': 'DeviceType',
        'emergency_contact': 'str',
        'helpline': 'str',
        'blogs_checked_date': 'int',
        'tips_checked_date': 'int'
    }

    attribute_map = {
        'theme': 'theme',
        'language': 'language',
        'last_login': 'last_login',
        'device_type': 'device_type',
        'emergency_contact': 'emergency_contact',
        'helpline': 'helpline',
        'blogs_checked_date': 'blogs_checked_date',
        'tips_checked_date': 'tips_checked_date'
    }

    def __init__(self, theme=None, language=None, last_login=None, device_type=None, emergency_contact=None, helpline=None, blogs_checked_date=None, tips_checked_date=None):  # noqa: E501
        """ParticipantSettings - a model defined in OpenAPI"""  # noqa: E501

        self._theme = None
        self._language = None
        self._last_login = None
        self._device_type = None
        self._emergency_contact = None
        self._helpline = None
        self._blogs_checked_date = None
        self._tips_checked_date = None
        self.discriminator = None

        if theme is not None:
            self.theme = theme
        if language is not None:
            self.language = language
        if last_login is not None:
            self.last_login = last_login
        if device_type is not None:
            self.device_type = device_type
        if emergency_contact is not None:
            self.emergency_contact = emergency_contact
        if helpline is not None:
            self.helpline = helpline
        if blogs_checked_date is not None:
            self.blogs_checked_date = blogs_checked_date
        if tips_checked_date is not None:
            self.tips_checked_date = tips_checked_date

    @property
    def theme(self):
        """Gets the theme of this ParticipantSettings.  # noqa: E501

        The participant's selected theme for the LAMP app.  # noqa: E501

        :return: The theme of this ParticipantSettings.  # noqa: E501
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this ParticipantSettings.

        The participant's selected theme for the LAMP app.  # noqa: E501

        :param theme: The theme of this ParticipantSettings.  # noqa: E501
        :type: str
        """

        self._theme = theme

    @property
    def language(self):
        """Gets the language of this ParticipantSettings.  # noqa: E501

        The participant's selected language code for the LAMP app.  # noqa: E501

        :return: The language of this ParticipantSettings.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ParticipantSettings.

        The participant's selected language code for the LAMP app.  # noqa: E501

        :param language: The language of this ParticipantSettings.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def last_login(self):
        """Gets the last_login of this ParticipantSettings.  # noqa: E501


        :return: The last_login of this ParticipantSettings.  # noqa: E501
        :rtype: int
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this ParticipantSettings.


        :param last_login: The last_login of this ParticipantSettings.  # noqa: E501
        :type: int
        """

        self._last_login = last_login

    @property
    def device_type(self):
        """Gets the device_type of this ParticipantSettings.  # noqa: E501


        :return: The device_type of this ParticipantSettings.  # noqa: E501
        :rtype: DeviceType
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this ParticipantSettings.


        :param device_type: The device_type of this ParticipantSettings.  # noqa: E501
        :type: DeviceType
        """

        self._device_type = device_type

    @property
    def emergency_contact(self):
        """Gets the emergency_contact of this ParticipantSettings.  # noqa: E501

        The participant's emergency contact number.  # noqa: E501

        :return: The emergency_contact of this ParticipantSettings.  # noqa: E501
        :rtype: str
        """
        return self._emergency_contact

    @emergency_contact.setter
    def emergency_contact(self, emergency_contact):
        """Sets the emergency_contact of this ParticipantSettings.

        The participant's emergency contact number.  # noqa: E501

        :param emergency_contact: The emergency_contact of this ParticipantSettings.  # noqa: E501
        :type: str
        """

        self._emergency_contact = emergency_contact

    @property
    def helpline(self):
        """Gets the helpline of this ParticipantSettings.  # noqa: E501

        The participant's selected personal helpline number.  # noqa: E501

        :return: The helpline of this ParticipantSettings.  # noqa: E501
        :rtype: str
        """
        return self._helpline

    @helpline.setter
    def helpline(self, helpline):
        """Sets the helpline of this ParticipantSettings.

        The participant's selected personal helpline number.  # noqa: E501

        :param helpline: The helpline of this ParticipantSettings.  # noqa: E501
        :type: str
        """

        self._helpline = helpline

    @property
    def blogs_checked_date(self):
        """Gets the blogs_checked_date of this ParticipantSettings.  # noqa: E501


        :return: The blogs_checked_date of this ParticipantSettings.  # noqa: E501
        :rtype: int
        """
        return self._blogs_checked_date

    @blogs_checked_date.setter
    def blogs_checked_date(self, blogs_checked_date):
        """Sets the blogs_checked_date of this ParticipantSettings.


        :param blogs_checked_date: The blogs_checked_date of this ParticipantSettings.  # noqa: E501
        :type: int
        """

        self._blogs_checked_date = blogs_checked_date

    @property
    def tips_checked_date(self):
        """Gets the tips_checked_date of this ParticipantSettings.  # noqa: E501


        :return: The tips_checked_date of this ParticipantSettings.  # noqa: E501
        :rtype: int
        """
        return self._tips_checked_date

    @tips_checked_date.setter
    def tips_checked_date(self, tips_checked_date):
        """Sets the tips_checked_date of this ParticipantSettings.


        :param tips_checked_date: The tips_checked_date of this ParticipantSettings.  # noqa: E501
        :type: int
        """

        self._tips_checked_date = tips_checked_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParticipantSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
