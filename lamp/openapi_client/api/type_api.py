# coding: utf-8

"""
    LAMP Platform

    The LAMP Platform API.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class TypeApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def type_get_attachment(self, type_id, attachment_key, **kwargs):  # noqa: E501
        """type_get_attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.type_get_attachment(type_id, attachment_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type_id: (required)
        :param str attachment_key: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.type_get_attachment_with_http_info(type_id, attachment_key, **kwargs)  # noqa: E501

    def type_get_attachment_with_http_info(self, type_id, attachment_key, **kwargs):  # noqa: E501
        """type_get_attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.type_get_attachment_with_http_info(type_id, attachment_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type_id: (required)
        :param str attachment_key: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['type_id', 'attachment_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method type_get_attachment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'type_id' is set
        if self.api_client.client_side_validation and ('type_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['type_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type_id` when calling `type_get_attachment`")  # noqa: E501
        # verify the required parameter 'attachment_key' is set
        if self.api_client.client_side_validation and ('attachment_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['attachment_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `attachment_key` when calling `type_get_attachment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type_id' in local_var_params:
            path_params['type_id'] = local_var_params['type_id']  # noqa: E501
        if 'attachment_key' in local_var_params:
            path_params['attachment_key'] = local_var_params['attachment_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/type/{type_id}/attachment/{attachment_key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def type_get_dynamic_attachment(self, type_id, attachment_key, invoke_always, include_logs, ignore_output, **kwargs):  # noqa: E501
        """type_get_dynamic_attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.type_get_dynamic_attachment(type_id, attachment_key, invoke_always, include_logs, ignore_output, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type_id: (required)
        :param str attachment_key: (required)
        :param bool invoke_always: (required)
        :param bool include_logs: (required)
        :param bool ignore_output: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.type_get_dynamic_attachment_with_http_info(type_id, attachment_key, invoke_always, include_logs, ignore_output, **kwargs)  # noqa: E501

    def type_get_dynamic_attachment_with_http_info(self, type_id, attachment_key, invoke_always, include_logs, ignore_output, **kwargs):  # noqa: E501
        """type_get_dynamic_attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.type_get_dynamic_attachment_with_http_info(type_id, attachment_key, invoke_always, include_logs, ignore_output, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type_id: (required)
        :param str attachment_key: (required)
        :param bool invoke_always: (required)
        :param bool include_logs: (required)
        :param bool ignore_output: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['type_id', 'attachment_key', 'invoke_always', 'include_logs', 'ignore_output']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method type_get_dynamic_attachment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'type_id' is set
        if self.api_client.client_side_validation and ('type_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['type_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type_id` when calling `type_get_dynamic_attachment`")  # noqa: E501
        # verify the required parameter 'attachment_key' is set
        if self.api_client.client_side_validation and ('attachment_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['attachment_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `attachment_key` when calling `type_get_dynamic_attachment`")  # noqa: E501
        # verify the required parameter 'invoke_always' is set
        if self.api_client.client_side_validation and ('invoke_always' not in local_var_params or  # noqa: E501
                                                        local_var_params['invoke_always'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `invoke_always` when calling `type_get_dynamic_attachment`")  # noqa: E501
        # verify the required parameter 'include_logs' is set
        if self.api_client.client_side_validation and ('include_logs' not in local_var_params or  # noqa: E501
                                                        local_var_params['include_logs'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `include_logs` when calling `type_get_dynamic_attachment`")  # noqa: E501
        # verify the required parameter 'ignore_output' is set
        if self.api_client.client_side_validation and ('ignore_output' not in local_var_params or  # noqa: E501
                                                        local_var_params['ignore_output'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ignore_output` when calling `type_get_dynamic_attachment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type_id' in local_var_params:
            path_params['type_id'] = local_var_params['type_id']  # noqa: E501
        if 'attachment_key' in local_var_params:
            path_params['attachment_key'] = local_var_params['attachment_key']  # noqa: E501

        query_params = []
        if 'invoke_always' in local_var_params and local_var_params['invoke_always'] is not None:  # noqa: E501
            query_params.append(('invoke_always', local_var_params['invoke_always']))  # noqa: E501
        if 'include_logs' in local_var_params and local_var_params['include_logs'] is not None:  # noqa: E501
            query_params.append(('include_logs', local_var_params['include_logs']))  # noqa: E501
        if 'ignore_output' in local_var_params and local_var_params['ignore_output'] is not None:  # noqa: E501
            query_params.append(('ignore_output', local_var_params['ignore_output']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/type/{type_id}/attachment/dynamic/{attachment_key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def type_list_attachments(self, type_id, **kwargs):  # noqa: E501
        """type_list_attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.type_list_attachments(type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.type_list_attachments_with_http_info(type_id, **kwargs)  # noqa: E501

    def type_list_attachments_with_http_info(self, type_id, **kwargs):  # noqa: E501
        """type_list_attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.type_list_attachments_with_http_info(type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method type_list_attachments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'type_id' is set
        if self.api_client.client_side_validation and ('type_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['type_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type_id` when calling `type_list_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type_id' in local_var_params:
            path_params['type_id'] = local_var_params['type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/type/{type_id}/attachment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def type_parent(self, type_id, **kwargs):  # noqa: E501
        """type_parent  # noqa: E501

        Get the parent type identifier of the data structure referenced by the identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.type_parent(type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.type_parent_with_http_info(type_id, **kwargs)  # noqa: E501

    def type_parent_with_http_info(self, type_id, **kwargs):  # noqa: E501
        """type_parent  # noqa: E501

        Get the parent type identifier of the data structure referenced by the identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.type_parent_with_http_info(type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method type_parent" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'type_id' is set
        if self.api_client.client_side_validation and ('type_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['type_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type_id` when calling `type_parent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type_id' in local_var_params:
            path_params['type_id'] = local_var_params['type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/type/{type_id}/parent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def type_set_attachment(self, type_id, target, attachment_key, body, **kwargs):  # noqa: E501
        """type_set_attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.type_set_attachment(type_id, target, attachment_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type_id: (required)
        :param str target: (required)
        :param str attachment_key: (required)
        :param object body: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.type_set_attachment_with_http_info(type_id, target, attachment_key, body, **kwargs)  # noqa: E501

    def type_set_attachment_with_http_info(self, type_id, target, attachment_key, body, **kwargs):  # noqa: E501
        """type_set_attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.type_set_attachment_with_http_info(type_id, target, attachment_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type_id: (required)
        :param str target: (required)
        :param str attachment_key: (required)
        :param object body: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['type_id', 'target', 'attachment_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method type_set_attachment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'type_id' is set
        if self.api_client.client_side_validation and ('type_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['type_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type_id` when calling `type_set_attachment`")  # noqa: E501
        # verify the required parameter 'target' is set
        if self.api_client.client_side_validation and ('target' not in local_var_params or  # noqa: E501
                                                        local_var_params['target'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `target` when calling `type_set_attachment`")  # noqa: E501
        # verify the required parameter 'attachment_key' is set
        if self.api_client.client_side_validation and ('attachment_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['attachment_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `attachment_key` when calling `type_set_attachment`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `type_set_attachment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type_id' in local_var_params:
            path_params['type_id'] = local_var_params['type_id']  # noqa: E501
        if 'target' in local_var_params:
            path_params['target'] = local_var_params['target']  # noqa: E501
        if 'attachment_key' in local_var_params:
            path_params['attachment_key'] = local_var_params['attachment_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/type/{type_id}/attachment/{attachment_key}/{target}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def type_set_dynamic_attachment(self, type_id, target, attachment_key, invoke_once, dynamic_attachment, **kwargs):  # noqa: E501
        """type_set_dynamic_attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.type_set_dynamic_attachment(type_id, target, attachment_key, invoke_once, dynamic_attachment, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type_id: (required)
        :param str target: (required)
        :param str attachment_key: (required)
        :param bool invoke_once: (required)
        :param DynamicAttachment dynamic_attachment: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.type_set_dynamic_attachment_with_http_info(type_id, target, attachment_key, invoke_once, dynamic_attachment, **kwargs)  # noqa: E501

    def type_set_dynamic_attachment_with_http_info(self, type_id, target, attachment_key, invoke_once, dynamic_attachment, **kwargs):  # noqa: E501
        """type_set_dynamic_attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.type_set_dynamic_attachment_with_http_info(type_id, target, attachment_key, invoke_once, dynamic_attachment, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type_id: (required)
        :param str target: (required)
        :param str attachment_key: (required)
        :param bool invoke_once: (required)
        :param DynamicAttachment dynamic_attachment: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['type_id', 'target', 'attachment_key', 'invoke_once', 'dynamic_attachment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method type_set_dynamic_attachment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'type_id' is set
        if self.api_client.client_side_validation and ('type_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['type_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type_id` when calling `type_set_dynamic_attachment`")  # noqa: E501
        # verify the required parameter 'target' is set
        if self.api_client.client_side_validation and ('target' not in local_var_params or  # noqa: E501
                                                        local_var_params['target'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `target` when calling `type_set_dynamic_attachment`")  # noqa: E501
        # verify the required parameter 'attachment_key' is set
        if self.api_client.client_side_validation and ('attachment_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['attachment_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `attachment_key` when calling `type_set_dynamic_attachment`")  # noqa: E501
        # verify the required parameter 'invoke_once' is set
        if self.api_client.client_side_validation and ('invoke_once' not in local_var_params or  # noqa: E501
                                                        local_var_params['invoke_once'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `invoke_once` when calling `type_set_dynamic_attachment`")  # noqa: E501
        # verify the required parameter 'dynamic_attachment' is set
        if self.api_client.client_side_validation and ('dynamic_attachment' not in local_var_params or  # noqa: E501
                                                        local_var_params['dynamic_attachment'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dynamic_attachment` when calling `type_set_dynamic_attachment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type_id' in local_var_params:
            path_params['type_id'] = local_var_params['type_id']  # noqa: E501
        if 'target' in local_var_params:
            path_params['target'] = local_var_params['target']  # noqa: E501
        if 'attachment_key' in local_var_params:
            path_params['attachment_key'] = local_var_params['attachment_key']  # noqa: E501

        query_params = []
        if 'invoke_once' in local_var_params and local_var_params['invoke_once'] is not None:  # noqa: E501
            query_params.append(('invoke_once', local_var_params['invoke_once']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dynamic_attachment' in local_var_params:
            body_params = local_var_params['dynamic_attachment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/type/{type_id}/attachment/dynamic/{attachment_key}/{target}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
