# coding: utf-8

"""
    LAMP Platform

    The LAMP Platform API.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from lamp.configuration import Configuration


class Participant(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'study_code': 'str',
        'language': 'str',
        'theme': 'str',
        'emergency_contact': 'str',
        'helpline': 'str'
    }

    attribute_map = {
        'id': 'id',
        'study_code': 'study_code',
        'language': 'language',
        'theme': 'theme',
        'emergency_contact': 'emergency_contact',
        'helpline': 'helpline'
    }

    def __init__(self, id=None, study_code=None, language=None, theme=None, emergency_contact=None, helpline=None, local_vars_configuration=None):  # noqa: E501
        """Participant - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._study_code = None
        self._language = None
        self._theme = None
        self._emergency_contact = None
        self._helpline = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if study_code is not None:
            self.study_code = study_code
        if language is not None:
            self.language = language
        if theme is not None:
            self.theme = theme
        if emergency_contact is not None:
            self.emergency_contact = emergency_contact
        if helpline is not None:
            self.helpline = helpline

    @property
    def id(self):
        """Gets the id of this Participant.  # noqa: E501

        A globally unique reference for objects.  # noqa: E501

        :return: The id of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Participant.

        A globally unique reference for objects.  # noqa: E501

        :param id: The id of this Participant.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def study_code(self):
        """Gets the study_code of this Participant.  # noqa: E501

        The researcher-provided study code for the participant.  # noqa: E501

        :return: The study_code of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._study_code

    @study_code.setter
    def study_code(self, study_code):
        """Sets the study_code of this Participant.

        The researcher-provided study code for the participant.  # noqa: E501

        :param study_code: The study_code of this Participant.  # noqa: E501
        :type: str
        """

        self._study_code = study_code

    @property
    def language(self):
        """Gets the language of this Participant.  # noqa: E501

        The participant's selected language code for the LAMP app.  # noqa: E501

        :return: The language of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Participant.

        The participant's selected language code for the LAMP app.  # noqa: E501

        :param language: The language of this Participant.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def theme(self):
        """Gets the theme of this Participant.  # noqa: E501

        The participant's selected theme for the LAMP app.  # noqa: E501

        :return: The theme of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this Participant.

        The participant's selected theme for the LAMP app.  # noqa: E501

        :param theme: The theme of this Participant.  # noqa: E501
        :type: str
        """

        self._theme = theme

    @property
    def emergency_contact(self):
        """Gets the emergency_contact of this Participant.  # noqa: E501

        The participant's emergency contact number.  # noqa: E501

        :return: The emergency_contact of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._emergency_contact

    @emergency_contact.setter
    def emergency_contact(self, emergency_contact):
        """Sets the emergency_contact of this Participant.

        The participant's emergency contact number.  # noqa: E501

        :param emergency_contact: The emergency_contact of this Participant.  # noqa: E501
        :type: str
        """

        self._emergency_contact = emergency_contact

    @property
    def helpline(self):
        """Gets the helpline of this Participant.  # noqa: E501

        The participant's selected personal helpline number.  # noqa: E501

        :return: The helpline of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._helpline

    @helpline.setter
    def helpline(self, helpline):
        """Sets the helpline of this Participant.

        The participant's selected personal helpline number.  # noqa: E501

        :param helpline: The helpline of this Participant.  # noqa: E501
        :type: str
        """

        self._helpline = helpline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Participant):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Participant):
            return True

        return self.to_dict() != other.to_dict()
