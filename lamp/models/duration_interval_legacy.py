# coding: utf-8

"""
    LAMP Platform

    The LAMP Platform API.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from lamp.configuration import Configuration


class DurationIntervalLegacy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'repeat_type': 'str',
        'date': 'float',
        'custom_times': 'list[object]'
    }

    attribute_map = {
        'repeat_type': 'repeat_type',
        'date': 'date',
        'custom_times': 'custom_times'
    }

    def __init__(self, repeat_type=None, date=None, custom_times=None, local_vars_configuration=None):  # noqa: E501
        """DurationIntervalLegacy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._repeat_type = None
        self._date = None
        self._custom_times = None
        self.discriminator = None

        if repeat_type is not None:
            self.repeat_type = repeat_type
        if date is not None:
            self.date = date
        if custom_times is not None:
            self.custom_times = custom_times

    @property
    def repeat_type(self):
        """Gets the repeat_type of this DurationIntervalLegacy.  # noqa: E501


        :return: The repeat_type of this DurationIntervalLegacy.  # noqa: E501
        :rtype: str
        """
        return self._repeat_type

    @repeat_type.setter
    def repeat_type(self, repeat_type):
        """Sets the repeat_type of this DurationIntervalLegacy.


        :param repeat_type: The repeat_type of this DurationIntervalLegacy.  # noqa: E501
        :type: str
        """

        self._repeat_type = repeat_type

    @property
    def date(self):
        """Gets the date of this DurationIntervalLegacy.  # noqa: E501

        The UNIX Epoch date-time representation: number of milliseconds since 1/1/1970 12:00 AM.  # noqa: E501

        :return: The date of this DurationIntervalLegacy.  # noqa: E501
        :rtype: float
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this DurationIntervalLegacy.

        The UNIX Epoch date-time representation: number of milliseconds since 1/1/1970 12:00 AM.  # noqa: E501

        :param date: The date of this DurationIntervalLegacy.  # noqa: E501
        :type: float
        """

        self._date = date

    @property
    def custom_times(self):
        """Gets the custom_times of this DurationIntervalLegacy.  # noqa: E501


        :return: The custom_times of this DurationIntervalLegacy.  # noqa: E501
        :rtype: list[object]
        """
        return self._custom_times

    @custom_times.setter
    def custom_times(self, custom_times):
        """Sets the custom_times of this DurationIntervalLegacy.


        :param custom_times: The custom_times of this DurationIntervalLegacy.  # noqa: E501
        :type: list[object]
        """

        self._custom_times = custom_times

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DurationIntervalLegacy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DurationIntervalLegacy):
            return True

        return self.to_dict() != other.to_dict()
