# coding: utf-8

"""
    LAMP Platform

    The LAMP Platform API.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from lamp.configuration import Configuration


class AccessCitation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_in': 'str',
        'at': 'str',
        'on': 'float',
        'by': 'str'
    }

    attribute_map = {
        '_in': 'in',
        'at': 'at',
        'on': 'on',
        'by': 'by'
    }

    def __init__(self, _in=None, at=None, on=None, by=None, local_vars_configuration=None):  # noqa: E501
        """AccessCitation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__in = None
        self._at = None
        self._on = None
        self._by = None
        self.discriminator = None

        if _in is not None:
            self._in = _in
        if at is not None:
            self.at = at
        if on is not None:
            self.on = on
        if by is not None:
            self.by = by

    @property
    def _in(self):
        """Gets the _in of this AccessCitation.  # noqa: E501


        :return: The _in of this AccessCitation.  # noqa: E501
        :rtype: str
        """
        return self.__in

    @_in.setter
    def _in(self, _in):
        """Sets the _in of this AccessCitation.


        :param _in: The _in of this AccessCitation.  # noqa: E501
        :type: str
        """

        self.__in = _in

    @property
    def at(self):
        """Gets the at of this AccessCitation.  # noqa: E501


        :return: The at of this AccessCitation.  # noqa: E501
        :rtype: str
        """
        return self._at

    @at.setter
    def at(self, at):
        """Sets the at of this AccessCitation.


        :param at: The at of this AccessCitation.  # noqa: E501
        :type: str
        """

        self._at = at

    @property
    def on(self):
        """Gets the on of this AccessCitation.  # noqa: E501

        The UNIX Epoch date-time representation: number of milliseconds since 1/1/1970 12:00 AM.  # noqa: E501

        :return: The on of this AccessCitation.  # noqa: E501
        :rtype: float
        """
        return self._on

    @on.setter
    def on(self, on):
        """Sets the on of this AccessCitation.

        The UNIX Epoch date-time representation: number of milliseconds since 1/1/1970 12:00 AM.  # noqa: E501

        :param on: The on of this AccessCitation.  # noqa: E501
        :type: float
        """

        self._on = on

    @property
    def by(self):
        """Gets the by of this AccessCitation.  # noqa: E501


        :return: The by of this AccessCitation.  # noqa: E501
        :rtype: str
        """
        return self._by

    @by.setter
    def by(self, by):
        """Sets the by of this AccessCitation.


        :param by: The by of this AccessCitation.  # noqa: E501
        :type: str
        """

        self._by = by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessCitation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccessCitation):
            return True

        return self.to_dict() != other.to_dict()
