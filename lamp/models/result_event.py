# coding: utf-8

"""
    LAMP Platform

    The LAMP Platform API.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from lamp.configuration import Configuration


class ResultEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'timestamp': 'float',
        'duration': 'int',
        'activity': 'str',
        'static_data': 'object',
        'temporal_events': 'list[object]'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'duration': 'duration',
        'activity': 'activity',
        'static_data': 'static_data',
        'temporal_events': 'temporal_events'
    }

    def __init__(self, timestamp=None, duration=None, activity=None, static_data=None, temporal_events=None, local_vars_configuration=None):  # noqa: E501
        """ResultEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._timestamp = None
        self._duration = None
        self._activity = None
        self._static_data = None
        self._temporal_events = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        if duration is not None:
            self.duration = duration
        if activity is not None:
            self.activity = activity
        if static_data is not None:
            self.static_data = static_data
        if temporal_events is not None:
            self.temporal_events = temporal_events

    @property
    def timestamp(self):
        """Gets the timestamp of this ResultEvent.  # noqa: E501

        The UNIX Epoch date-time representation: number of milliseconds since 1/1/1970 12:00 AM.  # noqa: E501

        :return: The timestamp of this ResultEvent.  # noqa: E501
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ResultEvent.

        The UNIX Epoch date-time representation: number of milliseconds since 1/1/1970 12:00 AM.  # noqa: E501

        :param timestamp: The timestamp of this ResultEvent.  # noqa: E501
        :type: float
        """

        self._timestamp = timestamp

    @property
    def duration(self):
        """Gets the duration of this ResultEvent.  # noqa: E501

        The duration this event lasted before recording ended.  # noqa: E501

        :return: The duration of this ResultEvent.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ResultEvent.

        The duration this event lasted before recording ended.  # noqa: E501

        :param duration: The duration of this ResultEvent.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def activity(self):
        """Gets the activity of this ResultEvent.  # noqa: E501

        A globally unique reference for objects.  # noqa: E501

        :return: The activity of this ResultEvent.  # noqa: E501
        :rtype: str
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this ResultEvent.

        A globally unique reference for objects.  # noqa: E501

        :param activity: The activity of this ResultEvent.  # noqa: E501
        :type: str
        """

        self._activity = activity

    @property
    def static_data(self):
        """Gets the static_data of this ResultEvent.  # noqa: E501

        The summary information for the result event as determined by the  activity that created this result event.  # noqa: E501

        :return: The static_data of this ResultEvent.  # noqa: E501
        :rtype: object
        """
        return self._static_data

    @static_data.setter
    def static_data(self, static_data):
        """Sets the static_data of this ResultEvent.

        The summary information for the result event as determined by the  activity that created this result event.  # noqa: E501

        :param static_data: The static_data of this ResultEvent.  # noqa: E501
        :type: object
        """

        self._static_data = static_data

    @property
    def temporal_events(self):
        """Gets the temporal_events of this ResultEvent.  # noqa: E501

        The specific interaction details of the result event.  # noqa: E501

        :return: The temporal_events of this ResultEvent.  # noqa: E501
        :rtype: list[object]
        """
        return self._temporal_events

    @temporal_events.setter
    def temporal_events(self, temporal_events):
        """Sets the temporal_events of this ResultEvent.

        The specific interaction details of the result event.  # noqa: E501

        :param temporal_events: The temporal_events of this ResultEvent.  # noqa: E501
        :type: list[object]
        """

        self._temporal_events = temporal_events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResultEvent):
            return True

        return self.to_dict() != other.to_dict()
